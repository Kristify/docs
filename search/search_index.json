{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Home Welcome to the kristify documentation! Kristify lets you maintain your shop in Minecraft easily while keeping full customization! Here you will find anything you need to know to set up your own shop! Feel free to navigate around with the sidebar on the left. Look at the masterpiece of a teaser here!","title":"Home"},{"location":"#home","text":"Welcome to the kristify documentation! Kristify lets you maintain your shop in Minecraft easily while keeping full customization! Here you will find anything you need to know to set up your own shop! Feel free to navigate around with the sidebar on the left. Look at the masterpiece of a teaser here!","title":"Home"},{"location":"About/contributing/","text":"Contributing Want to help develop Kristify? Or just want to say thanks? Then this is the right place! Code contributions We love help in the aspect of code! This is based around Git and GitHub. There are tons of tutorials out there. Documentation contributions Documentation is very important for any good project. We may not always be good at writing documentation, and your help to change this is welcome! This is also based around on GitHub. (See repo kristify/kristify.github.io ) Krist contributions Kristify is a shop, that lets you trade items for krist. You can support the maintainers and creators with krist, if you have lots of that. Krist sent to kristify.kst will be split 50/50 between PC_Cat (Erb3) and Sammy (1Turtle) Thanks for your contribution.","title":"Contributing"},{"location":"About/contributing/#contributing","text":"Want to help develop Kristify? Or just want to say thanks? Then this is the right place!","title":"Contributing"},{"location":"About/contributing/#code-contributions","text":"We love help in the aspect of code! This is based around Git and GitHub. There are tons of tutorials out there.","title":"Code contributions"},{"location":"About/contributing/#documentation-contributions","text":"Documentation is very important for any good project. We may not always be good at writing documentation, and your help to change this is welcome! This is also based around on GitHub. (See repo kristify/kristify.github.io )","title":"Documentation contributions"},{"location":"About/contributing/#krist-contributions","text":"Kristify is a shop, that lets you trade items for krist. You can support the maintainers and creators with krist, if you have lots of that. Krist sent to kristify.kst will be split 50/50 between PC_Cat (Erb3) and Sammy (1Turtle) Thanks for your contribution.","title":"Krist contributions"},{"location":"About/glossary/","text":"Glossary Here are a few words explained that you should know: Word Meaning Krist Krist is a virtual economy! Krist ly Kristly is a lua library to interact with krist Krist ify Either the software (the shop) or the team name Docs Documentation. What you are reading right now Metaname Metaname is the part in a krist address that is before the @. Name In the context of krist, a name is sort of like a domain. We also use name this to signify the metaname you should use to pay. CC:T ComputerCraft: Tweaked. The minecraft mod Turtle A block/entity inside of ComputerCraft MCCM Minecraft Computer Mods, the discord guild","title":"Glossary"},{"location":"About/glossary/#glossary","text":"Here are a few words explained that you should know: Word Meaning Krist Krist is a virtual economy! Krist ly Kristly is a lua library to interact with krist Krist ify Either the software (the shop) or the team name Docs Documentation. What you are reading right now Metaname Metaname is the part in a krist address that is before the @. Name In the context of krist, a name is sort of like a domain. We also use name this to signify the metaname you should use to pay. CC:T ComputerCraft: Tweaked. The minecraft mod Turtle A block/entity inside of ComputerCraft MCCM Minecraft Computer Mods, the discord guild","title":"Glossary"},{"location":"About/shop_comparison/","text":"Shop comparison Updated: 30/12-22 This is a comparison between different shop software for modern minecraft versions. Kristify MSKS Denarius Author Kristify team (PC_Cat, Sammy) MasonGulu Marcus Wenzel License MIT No License MIT Website kristify.madefor.cc github.com/MasonGulu/msks github.com/Snowflake-Software/denarius Dependencies Automatically installed Automatically installed Manually installed All dependencies opensource? Yes Yes Yes GUI Type Ingame monitor Custom GUI Yes. XML based. GUI displays Item name, stock, price per unit, metaname Refunds Wrong metaname, stock, underpay, change Customizable refund messages Yes Toggleable refunds No Inventories adjacent No On storage network Yes Krist connection type Websocket and HTTP Requires krist name Yes Automatic profit forwarding Yes Redstone heartbeats No Sales statistics No Updates Fully manual Notifications Discord, Discord Embed, Google Chat Notification types Purchase Restart on error No Configuration type Lua table Configuration helper Website Remote control No Credits required Not required Uses github Yes Yes Yes Documentation 994 lines 156 lines 98 lines","title":"Shop comparison"},{"location":"About/shop_comparison/#shop-comparison","text":"Updated: 30/12-22 This is a comparison between different shop software for modern minecraft versions. Kristify MSKS Denarius Author Kristify team (PC_Cat, Sammy) MasonGulu Marcus Wenzel License MIT No License MIT Website kristify.madefor.cc github.com/MasonGulu/msks github.com/Snowflake-Software/denarius Dependencies Automatically installed Automatically installed Manually installed All dependencies opensource? Yes Yes Yes GUI Type Ingame monitor Custom GUI Yes. XML based. GUI displays Item name, stock, price per unit, metaname Refunds Wrong metaname, stock, underpay, change Customizable refund messages Yes Toggleable refunds No Inventories adjacent No On storage network Yes Krist connection type Websocket and HTTP Requires krist name Yes Automatic profit forwarding Yes Redstone heartbeats No Sales statistics No Updates Fully manual Notifications Discord, Discord Embed, Google Chat Notification types Purchase Restart on error No Configuration type Lua table Configuration helper Website Remote control No Credits required Not required Uses github Yes Yes Yes Documentation 994 lines 156 lines 98 lines","title":"Shop comparison"},{"location":"GettingStarted/configuration/","text":"Configuration Each shop contains a config.lua file, which configures important basics like the private key for refunds or the name. Note You can use the web-configurator . It lets you configure Kristify, with a GUI! Location: <kristify>/data/config.lua Fields Privatekey ( pkey ) The privatekey is the key to your krist wallet. This will be used for refunding. You should never share this with anyone, nor will Kristify. The privatekey is only ever transferred to krist.dev (the official krist server) . Krist name ( name ) The krist name to use with the shop. Payments will be sent to this name. You should not include .kst ! A krist name can be purchased for 500kst . The ability to run a shop without a name will come later on. Example cats Monitor ( monSide ) The side, or networkID of the monitor you want to display the shop on. Example top Tag line ( tagline ) The tagline of your shop! This will be displayed under the title. Example World's best shop!!! Storage Chests ( storage ) This is a table with network names of storage chests. The network name of a chest should come in chat when you connect it with a modem. Example { \"minecraft:chest_0\" , \"minecraft:chest_1\" , \"minecraft:chest_2\" } Messages ( message ) Messages is a table of messages to send, when a purchase is denied. No metaname ( noMetaname ) This message will be sent when the customer sent a payment without metaname. Example message=No metaname found! Refunding. Nonexistent item ( nonexistantItem ) This message will be sent when the customer has sent payment to an item, which does not exist. Example message=The item you requested is not available for purchase Not enough money ( notEnoughMoney ) This message will be sent when the customer has sent too little krist. Example message=Insufficient amount of krist sent. Not enough stock ( notEnoughStock ) This message will be sent when the customer has sent more krist, than stock available. Example message=We don't have that much stock! Change ( change ) This message will be sent together with the change. Example message=Here is your change! Thanks for using our shop. Speakers ( speakers ) Speakers is a table of speakers. It is in the format of network ids. Example { \"speaker_0\" , \"speaker_1\" } Sounds ( sounds ) Sounds is a table of different sounds that will be played at different events. On startup ( started ) This sound will be played when the shop is ready to receive purchases. Example minecraft:block.note_block.harp On purchase ( purchase ) This sound will be played when the shop received a valid purchase. Example minecraft:entity.villager.yes On error ( error ) This sound will be played when the shop received an invalid purchase. Example minecraft:block.anvil.land Redstone Pulses ( redstonePulse ) Kristify can do redstone pulses to make for example a redstone lamp flash. The redstone pulse field should have a table that contains delay and a tablearray that contains sides. Example redstonePulse = { delay = 3 , sides = { \"right\" } } Webhooks ( webhooks ) Webhooks is a table with webhooks. There are currently three different webhook types: discord-modern discord googleChat Along with the type you also have to supply a URL, and on events it will fire. The available events are: purchase invalid The purchase event is triggered on a purchase, while invalid is triggered on an invalid purchase. Please see the example below: Example webhooks = { { type = \"discord-modern\" , URL = \"https://discord.com/api/webhook/blablabla-token-blablalbalb\" , events = { \"purchase\" , \"invalid\" } } } ShopSync ( shopSync ) ShopSync is a protocol for broadcasting shop information & prices over modems developed by 6_4. Enabled ( enabled ) Boolean value that enables the broadcast of ShopSync data. Example true Modem ( modem ) The modem that ShopSync data will broadcast over. If left blank, it will attempt to automatically find an ender or wireless modem. Example \"right\" Owner ( owner ) The owner of the shop, typically a username. Example \"Yemmel\" Multiple Shops ( multiShop ) If multiple shops are ran off of the same computer, this should be an integer value counting up from 1. Otherwise, this should be left nil. Example nil Location ( location ) The location of the shop, described in coordinates and/or text. Broadcast Location ( broadcastLocation ) Boolean value that determines whether location information is broadcast. Example true Coordinates ( coordinates ) The coordinates of the shop. If left at defaults, and broadcastLocation is true, GPS may be used to determine the location of the shop. Example { 138, 75, 248 } Description ( description ) A text description of the shop's location. Example \"North of spawn, just outside Immediate Spawn Area.\" Dimension ( dimension ) Dimension the shop is located in. It can be one of the following: * overworld * nether * end Example \"overworld\"","title":"Configuration"},{"location":"GettingStarted/configuration/#configuration","text":"Each shop contains a config.lua file, which configures important basics like the private key for refunds or the name. Note You can use the web-configurator . It lets you configure Kristify, with a GUI! Location: <kristify>/data/config.lua","title":"Configuration"},{"location":"GettingStarted/configuration/#fields","text":"","title":"Fields"},{"location":"GettingStarted/configuration/#privatekey-pkey","text":"The privatekey is the key to your krist wallet. This will be used for refunding. You should never share this with anyone, nor will Kristify. The privatekey is only ever transferred to krist.dev (the official krist server) .","title":"Privatekey (pkey)"},{"location":"GettingStarted/configuration/#krist-name-name","text":"The krist name to use with the shop. Payments will be sent to this name. You should not include .kst ! A krist name can be purchased for 500kst . The ability to run a shop without a name will come later on. Example cats","title":"Krist name (name)"},{"location":"GettingStarted/configuration/#monitor-monside","text":"The side, or networkID of the monitor you want to display the shop on. Example top","title":"Monitor (monSide)"},{"location":"GettingStarted/configuration/#tag-line-tagline","text":"The tagline of your shop! This will be displayed under the title. Example World's best shop!!!","title":"Tag line (tagline)"},{"location":"GettingStarted/configuration/#storage-chests-storage","text":"This is a table with network names of storage chests. The network name of a chest should come in chat when you connect it with a modem. Example { \"minecraft:chest_0\" , \"minecraft:chest_1\" , \"minecraft:chest_2\" }","title":"Storage Chests (storage)"},{"location":"GettingStarted/configuration/#messages-message","text":"Messages is a table of messages to send, when a purchase is denied.","title":"Messages (message)"},{"location":"GettingStarted/configuration/#no-metaname-nometaname","text":"This message will be sent when the customer sent a payment without metaname. Example message=No metaname found! Refunding.","title":"No metaname (noMetaname)"},{"location":"GettingStarted/configuration/#nonexistent-item-nonexistantitem","text":"This message will be sent when the customer has sent payment to an item, which does not exist. Example message=The item you requested is not available for purchase","title":"Nonexistent item (nonexistantItem)"},{"location":"GettingStarted/configuration/#not-enough-money-notenoughmoney","text":"This message will be sent when the customer has sent too little krist. Example message=Insufficient amount of krist sent.","title":"Not enough money (notEnoughMoney)"},{"location":"GettingStarted/configuration/#not-enough-stock-notenoughstock","text":"This message will be sent when the customer has sent more krist, than stock available. Example message=We don't have that much stock!","title":"Not enough stock (notEnoughStock)"},{"location":"GettingStarted/configuration/#change-change","text":"This message will be sent together with the change. Example message=Here is your change! Thanks for using our shop.","title":"Change (change)"},{"location":"GettingStarted/configuration/#speakers-speakers","text":"Speakers is a table of speakers. It is in the format of network ids. Example { \"speaker_0\" , \"speaker_1\" }","title":"Speakers (speakers)"},{"location":"GettingStarted/configuration/#sounds-sounds","text":"Sounds is a table of different sounds that will be played at different events.","title":"Sounds (sounds)"},{"location":"GettingStarted/configuration/#on-startup-started","text":"This sound will be played when the shop is ready to receive purchases. Example minecraft:block.note_block.harp","title":"On startup (started)"},{"location":"GettingStarted/configuration/#on-purchase-purchase","text":"This sound will be played when the shop received a valid purchase. Example minecraft:entity.villager.yes","title":"On purchase (purchase)"},{"location":"GettingStarted/configuration/#on-error-error","text":"This sound will be played when the shop received an invalid purchase. Example minecraft:block.anvil.land","title":"On error (error)"},{"location":"GettingStarted/configuration/#redstone-pulses-redstonepulse","text":"Kristify can do redstone pulses to make for example a redstone lamp flash. The redstone pulse field should have a table that contains delay and a tablearray that contains sides. Example redstonePulse = { delay = 3 , sides = { \"right\" } }","title":"Redstone Pulses (redstonePulse)"},{"location":"GettingStarted/configuration/#webhooks-webhooks","text":"Webhooks is a table with webhooks. There are currently three different webhook types: discord-modern discord googleChat Along with the type you also have to supply a URL, and on events it will fire. The available events are: purchase invalid The purchase event is triggered on a purchase, while invalid is triggered on an invalid purchase. Please see the example below: Example webhooks = { { type = \"discord-modern\" , URL = \"https://discord.com/api/webhook/blablabla-token-blablalbalb\" , events = { \"purchase\" , \"invalid\" } } }","title":"Webhooks (webhooks)"},{"location":"GettingStarted/configuration/#shopsync-shopsync","text":"ShopSync is a protocol for broadcasting shop information & prices over modems developed by 6_4.","title":"ShopSync (shopSync)"},{"location":"GettingStarted/configuration/#enabled-enabled","text":"Boolean value that enables the broadcast of ShopSync data. Example true","title":"Enabled (enabled)"},{"location":"GettingStarted/configuration/#modem-modem","text":"The modem that ShopSync data will broadcast over. If left blank, it will attempt to automatically find an ender or wireless modem. Example \"right\"","title":"Modem (modem)"},{"location":"GettingStarted/configuration/#owner-owner","text":"The owner of the shop, typically a username. Example \"Yemmel\"","title":"Owner (owner)"},{"location":"GettingStarted/configuration/#multiple-shops-multishop","text":"If multiple shops are ran off of the same computer, this should be an integer value counting up from 1. Otherwise, this should be left nil. Example nil","title":"Multiple Shops (multiShop)"},{"location":"GettingStarted/configuration/#location-location","text":"The location of the shop, described in coordinates and/or text.","title":"Location (location)"},{"location":"GettingStarted/configuration/#broadcast-location-broadcastlocation","text":"Boolean value that determines whether location information is broadcast. Example true","title":"Broadcast Location (broadcastLocation)"},{"location":"GettingStarted/configuration/#coordinates-coordinates","text":"The coordinates of the shop. If left at defaults, and broadcastLocation is true, GPS may be used to determine the location of the shop. Example { 138, 75, 248 }","title":"Coordinates (coordinates)"},{"location":"GettingStarted/configuration/#description-description","text":"A text description of the shop's location. Example \"North of spawn, just outside Immediate Spawn Area.\"","title":"Description (description)"},{"location":"GettingStarted/configuration/#dimension-dimension","text":"Dimension the shop is located in. It can be one of the following: * overworld * nether * end Example \"overworld\"","title":"Dimension (dimension)"},{"location":"GettingStarted/installation/","text":"Installation To get started, run the following command on a Turtle : wget run https://kristify.madefor.cc/installer.lua This should open a GUI and guide you through the installing progress of Kristify. \ud83d\udc49 Note: If you get the error ..Forbidden.. , the reason for that could be because of GitHub's rate limiting. If this is the case, wait for about 1h or hope you play on a server that provides a git token. After the installation is done, you still need to set up a few things: Setup physical stuff (description below) Configuration (See docs ) Add products (See docs ) Step 2 and 3 will be explained in their corresponding docs page (see links above) . The physical part will be explained here. You should now have a Turtle with Kristify installed on it. Great! Now it's time to place the following things. Kristify needs the following parts: Monitor (Minimum 5x3 large) Chests (Connect as much as you need) Turtle After connecting them to the network, write down which name they have (e.g. \"monitor_0\") . In addition, you can also connect speakers for sound support! It doesn't matter how you place all those components. Just make sure they are connected. However , The Turtle running Kristify should be only accessible to the shop owner , and not the customers! Or else bad things can happen! This was step 1. Easy, right? But before you are done, you now have to generate the configuration and your products! The config.lua and products.lua files can be now placed in <kristify_installation/data/ . And that's it!","title":"Installation"},{"location":"GettingStarted/installation/#installation","text":"To get started, run the following command on a Turtle : wget run https://kristify.madefor.cc/installer.lua This should open a GUI and guide you through the installing progress of Kristify. \ud83d\udc49 Note: If you get the error ..Forbidden.. , the reason for that could be because of GitHub's rate limiting. If this is the case, wait for about 1h or hope you play on a server that provides a git token. After the installation is done, you still need to set up a few things: Setup physical stuff (description below) Configuration (See docs ) Add products (See docs ) Step 2 and 3 will be explained in their corresponding docs page (see links above) . The physical part will be explained here. You should now have a Turtle with Kristify installed on it. Great! Now it's time to place the following things. Kristify needs the following parts: Monitor (Minimum 5x3 large) Chests (Connect as much as you need) Turtle After connecting them to the network, write down which name they have (e.g. \"monitor_0\") . In addition, you can also connect speakers for sound support! It doesn't matter how you place all those components. Just make sure they are connected. However , The Turtle running Kristify should be only accessible to the shop owner , and not the customers! Or else bad things can happen! This was step 1. Easy, right? But before you are done, you now have to generate the configuration and your products! The config.lua and products.lua files can be now placed in <kristify_installation/data/ . And that's it!","title":"Installation"},{"location":"GettingStarted/product-spec/","text":"Products Products that can be purchased in the shop are defined in products.lua . The specifications will be here explained. Note You can use the product generator . It lets you configure products, with a GUI! <kristify>/data/products.lua is a lua file which returns a table. This contains the products (which are tables as well) . Those \"sub-tables\" can be generated with the link above. Fields Display name ( displayName ) The name of the item you want to sell. This will appear on the monitor Price ( price ) The price per item in krist. If you want multiple items per krist you can set it to a decimal number. Example: If you want four items per krist then you set it to 0.25 Color ( color ) The color of the Display Name. (optional) Can be any color from the color API as string. Example: \"red\" or \"blue\" or nil, for the Themes default preference. Note: This option can be ignored by the theme. Minecraft Item ID ( id ) The ID of the item you want to sell. Example minecraft:dirt Metaname ( metaname ) The part the customer will pay to (before @name.kst) NBT Hash ( nbt ) NBT Hash of the item (if it has one) . This field is optional and can be nil. Example 704a1bcdf9953c791651a77b1fe78891 (hash of Mending book)","title":"Products"},{"location":"GettingStarted/product-spec/#products","text":"Products that can be purchased in the shop are defined in products.lua . The specifications will be here explained. Note You can use the product generator . It lets you configure products, with a GUI! <kristify>/data/products.lua is a lua file which returns a table. This contains the products (which are tables as well) . Those \"sub-tables\" can be generated with the link above.","title":"Products"},{"location":"GettingStarted/product-spec/#fields","text":"","title":"Fields"},{"location":"GettingStarted/product-spec/#display-name-displayname","text":"The name of the item you want to sell. This will appear on the monitor","title":"Display name (displayName)"},{"location":"GettingStarted/product-spec/#price-price","text":"The price per item in krist. If you want multiple items per krist you can set it to a decimal number. Example: If you want four items per krist then you set it to 0.25","title":"Price (price)"},{"location":"GettingStarted/product-spec/#color-color","text":"The color of the Display Name. (optional) Can be any color from the color API as string. Example: \"red\" or \"blue\" or nil, for the Themes default preference. Note: This option can be ignored by the theme.","title":"Color (color)"},{"location":"GettingStarted/product-spec/#minecraft-item-id-id","text":"The ID of the item you want to sell. Example minecraft:dirt","title":"Minecraft Item ID (id)"},{"location":"GettingStarted/product-spec/#metaname-metaname","text":"The part the customer will pay to (before @name.kst)","title":"Metaname (metaname)"},{"location":"GettingStarted/product-spec/#nbt-hash-nbt","text":"NBT Hash of the item (if it has one) . This field is optional and can be nil. Example 704a1bcdf9953c791651a77b1fe78891 (hash of Mending book)","title":"NBT Hash (nbt)"},{"location":"GettingStarted/usage/","text":"Usage After the installation and configuration is completed, you can start kristify via the following command: kristify.lua This will run the shop in a new tab. To stop the shop, run kristify.lua -e or kristify.lua --exit . For an overview of its subcommands, type --help or -h . subcommand short description --exit -e Stops Kristify and clears the monitor. --theme -t Shows the current theme or installs one. --version -v Prints current Kristify installation. --storage -s Reloads the storage. --update -u Reinstall Kristify while keeping the data folder.","title":"Usage"},{"location":"GettingStarted/usage/#usage","text":"After the installation and configuration is completed, you can start kristify via the following command: kristify.lua This will run the shop in a new tab. To stop the shop, run kristify.lua -e or kristify.lua --exit . For an overview of its subcommands, type --help or -h . subcommand short description --exit -e Stops Kristify and clears the monitor. --theme -t Shows the current theme or installs one. --version -v Prints current Kristify installation. --storage -s Reloads the storage. --update -u Reinstall Kristify while keeping the data folder.","title":"Usage"},{"location":"Theme/customization/","text":"Theme introduction Kristify uses the Basalt Framework , making it possible to fully customize your shop! Kristify comes with its default theme (kristify-default) . Other verified themes can be found in the corresponding repo . To install a verified theme, enter the following command: kristify.lua --theme <name> . Another common theme would be kristify-compact . So let's say you want to install that, then you would type kristify.lua --theme kristify-compact . If all those themes are nothing for you, that is fine too! In the next pages, we will explain how you make your own theme.","title":"Theme introduction"},{"location":"Theme/customization/#theme-introduction","text":"Kristify uses the Basalt Framework , making it possible to fully customize your shop! Kristify comes with its default theme (kristify-default) . Other verified themes can be found in the corresponding repo . To install a verified theme, enter the following command: kristify.lua --theme <name> . Another common theme would be kristify-compact . So let's say you want to install that, then you would type kristify.lua --theme kristify-compact . If all those themes are nothing for you, that is fine too! In the next pages, we will explain how you make your own theme.","title":"Theme introduction"},{"location":"Theme/layout/","text":"Layout Kristify loads the whole layout of a theme from <kristify>/data/pages/... . A theme can add as much stuff as it wants there. But two files have to always exists: index.xml widget.xml Index is the main layout. It renders the whole content of the monitor, Except: Widgets. Those display the products (one each) . XML variant As you can see, they are written in the xml format. That's one of the benefits by Basalt. (See their docs ). If you don't like xml or need something more powerful, then you can use a lua script! When Kristify loads index or widget , it first looks for a corresponding .lua file. If it can't find one, it then searches for a .xml variant. Lua variant While .xml files are the same just as basalt defined them, those lua files are loaded a bit differently. Here is an example of how you would create an empty frame for in index.lua : local ctx = ({ ... })[ 1 ] -- Context of Kristify; Contains many usefull informations like the configs or other loaded libs. local base = ({ ... })[ 2 ] -- The base frame for the interface. We will load our layout in that one! local basalt = ctx . basalt -- Basalt framework. Instead of loading our own, we use the one Kristify reccomends. local index = base : addFrame ( \"_app\" ) -- Create our frame with the \"_app\" id. : setSize ( \"parent.w\" , \"parent.h\" ) -- Give it the same size as their parent, aka the base frame. --:addLayout(fs.combine(ctx.path.page, \"index.xml\")) -- Would load the index.xml file into our frame from the pages folder. return index -- Return our frame to Kristify for further usage. IDs As you can see, we gave the frame the \"_app\" ID. Basalt objects have IDs that are used internally to find specific objects. Kristify has some common ids, used to load specific information like the shop title. Those begin with an underscore! Here is a table with some standard IDs, used by Kristify: Index ID Object type Description _app frame Root of index. _body frame Contains widget's (e.g. \"_widget_1\") . _head frame Normally contains _title , _title_end & _subtitle . _title label The shops name. _title_end label Top-Lvl domain (normally .kst) . _watermark label Our Name! You could remove it, but it would be really nice if you keep it. <3 _subtitle label Shops description. (aka tagline) _importantMSG label E.g. \"pay to @switchcraft.kst for a purchase\" _navigation frame Normally contains the three following Objects: _navBack button Go one page back, if available. _navNext button Go to the next page, if available. _curPage button Shows the current pages number. Widget ID Object type Description _widget frame Root of widget. (in production: e.g. \"_widget_1\") _name label The name of a product. _stock label How much the shop has left. (aka amount) _metaname label The metaname (e.g. \"iron\" @...) _price button The price tag (e.g. \"2kst\") Note Those objects don't have to be included, but it is generally recommended. If you need some more reference material, feel free to look at the default themes as they use a somewhat standard. If you make your own theme and need to find something specific to your theme, we recommend to use __ before every ID.","title":"Layout"},{"location":"Theme/layout/#layout","text":"Kristify loads the whole layout of a theme from <kristify>/data/pages/... . A theme can add as much stuff as it wants there. But two files have to always exists: index.xml widget.xml Index is the main layout. It renders the whole content of the monitor, Except: Widgets. Those display the products (one each) .","title":"Layout"},{"location":"Theme/layout/#xml-variant","text":"As you can see, they are written in the xml format. That's one of the benefits by Basalt. (See their docs ). If you don't like xml or need something more powerful, then you can use a lua script! When Kristify loads index or widget , it first looks for a corresponding .lua file. If it can't find one, it then searches for a .xml variant.","title":"XML variant"},{"location":"Theme/layout/#lua-variant","text":"While .xml files are the same just as basalt defined them, those lua files are loaded a bit differently. Here is an example of how you would create an empty frame for in index.lua : local ctx = ({ ... })[ 1 ] -- Context of Kristify; Contains many usefull informations like the configs or other loaded libs. local base = ({ ... })[ 2 ] -- The base frame for the interface. We will load our layout in that one! local basalt = ctx . basalt -- Basalt framework. Instead of loading our own, we use the one Kristify reccomends. local index = base : addFrame ( \"_app\" ) -- Create our frame with the \"_app\" id. : setSize ( \"parent.w\" , \"parent.h\" ) -- Give it the same size as their parent, aka the base frame. --:addLayout(fs.combine(ctx.path.page, \"index.xml\")) -- Would load the index.xml file into our frame from the pages folder. return index -- Return our frame to Kristify for further usage.","title":"Lua variant"},{"location":"Theme/layout/#ids","text":"As you can see, we gave the frame the \"_app\" ID. Basalt objects have IDs that are used internally to find specific objects. Kristify has some common ids, used to load specific information like the shop title. Those begin with an underscore! Here is a table with some standard IDs, used by Kristify:","title":"IDs"},{"location":"Theme/layout/#index","text":"ID Object type Description _app frame Root of index. _body frame Contains widget's (e.g. \"_widget_1\") . _head frame Normally contains _title , _title_end & _subtitle . _title label The shops name. _title_end label Top-Lvl domain (normally .kst) . _watermark label Our Name! You could remove it, but it would be really nice if you keep it. <3 _subtitle label Shops description. (aka tagline) _importantMSG label E.g. \"pay to @switchcraft.kst for a purchase\" _navigation frame Normally contains the three following Objects: _navBack button Go one page back, if available. _navNext button Go to the next page, if available. _curPage button Shows the current pages number.","title":"Index"},{"location":"Theme/layout/#widget","text":"ID Object type Description _widget frame Root of widget. (in production: e.g. \"_widget_1\") _name label The name of a product. _stock label How much the shop has left. (aka amount) _metaname label The metaname (e.g. \"iron\" @...) _price button The price tag (e.g. \"2kst\") Note Those objects don't have to be included, but it is generally recommended. If you need some more reference material, feel free to look at the default themes as they use a somewhat standard. If you make your own theme and need to find something specific to your theme, we recommend to use __ before every ID.","title":"Widget"}]}